// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock

import (
	model "github.com/afernandowex/ps-tag-onboarding-go/internal/app/model"
	mock "github.com/stretchr/testify/mock"
)

// IUserValidationService is an autogenerated mock type for the IUserValidationService type
type IUserValidationService struct {
	mock.Mock
}

// ValidateUser provides a mock function with given fields: user
func (_m *IUserValidationService) ValidateUser(user *model.User) []string {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUser")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(*model.User) []string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ValidateUserID provides a mock function with given fields: ID
func (_m *IUserValidationService) ValidateUserID(ID *string) []string {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserID")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(*string) []string); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewIUserValidationService creates a new instance of IUserValidationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserValidationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserValidationService {
	mock := &IUserValidationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
