// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	errormessage "github.com/afernandowex/ps-tag-onboarding-go/internal/app/user-api/errormessage"
	mock "github.com/stretchr/testify/mock"

	model "github.com/afernandowex/ps-tag-onboarding-go/internal/app/model"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// FindUserByID provides a mock function with given fields: ID
func (_m *IUserService) FindUserByID(ID *string) (*model.User, *errormessage.ErrorMessage) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *model.User
	var r1 *errormessage.ErrorMessage
	if rf, ok := ret.Get(0).(func(*string) (*model.User, *errormessage.ErrorMessage)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(*string) *model.User); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) *errormessage.ErrorMessage); ok {
		r1 = rf(ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errormessage.ErrorMessage)
		}
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: user
func (_m *IUserService) SaveUser(user *model.User) (*model.User, *errormessage.ErrorMessage) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 *model.User
	var r1 *errormessage.ErrorMessage
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, *errormessage.ErrorMessage)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) *errormessage.ErrorMessage); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errormessage.ErrorMessage)
		}
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
