// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	model "github.com/afernandowex/ps-tag-onboarding-go/internal/app/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// ExistsByFirstNameAndLastName provides a mock function with given fields: user
func (_m *IUserRepository) ExistsByFirstNameAndLastName(user *model.User) bool {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByFirstNameAndLastName")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User) bool); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *IUserRepository) FindByID(id *uuid.UUID) (*model.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*uuid.UUID) (*model.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*uuid.UUID) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: user
func (_m *IUserRepository) SaveUser(user *model.User) (*model.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
